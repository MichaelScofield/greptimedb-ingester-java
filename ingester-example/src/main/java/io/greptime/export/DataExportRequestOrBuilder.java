// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: export.proto

package io.greptime.export;

public interface DataExportRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:DataExportRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string catalog = 1;</code>
   * @return The catalog.
   */
  java.lang.String getCatalog();
  /**
   * <code>string catalog = 1;</code>
   * @return The bytes for catalog.
   */
  com.google.protobuf.ByteString
      getCatalogBytes();

  /**
   * <code>string schema = 2;</code>
   * @return The schema.
   */
  java.lang.String getSchema();
  /**
   * <code>string schema = 2;</code>
   * @return The bytes for schema.
   */
  com.google.protobuf.ByteString
      getSchemaBytes();

  /**
   * <code>repeated string tables = 3;</code>
   * @return A list containing the tables.
   */
  java.util.List<java.lang.String>
      getTablesList();
  /**
   * <code>repeated string tables = 3;</code>
   * @return The count of tables.
   */
  int getTablesCount();
  /**
   * <code>repeated string tables = 3;</code>
   * @param index The index of the element to return.
   * @return The tables at the given index.
   */
  java.lang.String getTables(int index);
  /**
   * <code>repeated string tables = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tables at the given index.
   */
  com.google.protobuf.ByteString
      getTablesBytes(int index);

  /**
   * <pre>
   *&#47; The file path to export data.
   * </pre>
   *
   * <code>string file_path = 4;</code>
   * @return The filePath.
   */
  java.lang.String getFilePath();
  /**
   * <pre>
   *&#47; The file path to export data.
   * </pre>
   *
   * <code>string file_path = 4;</code>
   * @return The bytes for filePath.
   */
  com.google.protobuf.ByteString
      getFilePathBytes();

  /**
   * <pre>
   *&#47; The name of the zip file to export.
   * </pre>
   *
   * <code>string file_name = 5;</code>
   * @return The fileName.
   */
  java.lang.String getFileName();
  /**
   * <pre>
   *&#47; The name of the zip file to export.
   * </pre>
   *
   * <code>string file_name = 5;</code>
   * @return The bytes for fileName.
   */
  com.google.protobuf.ByteString
      getFileNameBytes();

  /**
   * <pre>
   *&#47; The min timestamp of the data to export.
   * </pre>
   *
   * <code>optional int64 min_timestamp_ms = 6;</code>
   * @return Whether the minTimestampMs field is set.
   */
  boolean hasMinTimestampMs();
  /**
   * <pre>
   *&#47; The min timestamp of the data to export.
   * </pre>
   *
   * <code>optional int64 min_timestamp_ms = 6;</code>
   * @return The minTimestampMs.
   */
  long getMinTimestampMs();

  /**
   * <pre>
   *&#47; The max timestamp of the data to export.
   * </pre>
   *
   * <code>optional int64 max_timestamp_ms = 7;</code>
   * @return Whether the maxTimestampMs field is set.
   */
  boolean hasMaxTimestampMs();
  /**
   * <pre>
   *&#47; The max timestamp of the data to export.
   * </pre>
   *
   * <code>optional int64 max_timestamp_ms = 7;</code>
   * @return The maxTimestampMs.
   */
  long getMaxTimestampMs();

  /**
   * <pre>
   *&#47; The compression type of the exported zip file.
   * </pre>
   *
   * <code>.CompressionType compression_type = 8;</code>
   * @return The enum numeric value on the wire for compressionType.
   */
  int getCompressionTypeValue();
  /**
   * <pre>
   *&#47; The compression type of the exported zip file.
   * </pre>
   *
   * <code>.CompressionType compression_type = 8;</code>
   * @return The compressionType.
   */
  io.greptime.export.CompressionType getCompressionType();

  /**
   * <pre>
   *&#47; The compression level of the exported zip file.
   * </pre>
   *
   * <code>int32 compression_level = 9;</code>
   * @return The compressionLevel.
   */
  int getCompressionLevel();

  /**
   * <pre>
   *&#47; Compressing a certain amount of data. Because the main CPU cost of data
   * / export comes from compression.
   * / How long to sleep after each compression of data.
   * </pre>
   *
   * <code>uint64 compression_interval_ms = 10;</code>
   * @return The compressionIntervalMs.
   */
  long getCompressionIntervalMs();

  /**
   * <pre>
   *&#47; The number of bytes to compress at a time.
   * </pre>
   *
   * <code>uint64 bytes_per_compression = 11;</code>
   * @return The bytesPerCompression.
   */
  long getBytesPerCompression();

  /**
   * <pre>
   *&#47; The ID of the continuous incremental data export task. If empty, it is a
   * / normal data export task. If not empty, it is a continuous incremental
   * / data export task.
   * </pre>
   *
   * <code>optional string task_id = 12;</code>
   * @return Whether the taskId field is set.
   */
  boolean hasTaskId();
  /**
   * <pre>
   *&#47; The ID of the continuous incremental data export task. If empty, it is a
   * / normal data export task. If not empty, it is a continuous incremental
   * / data export task.
   * </pre>
   *
   * <code>optional string task_id = 12;</code>
   * @return The taskId.
   */
  java.lang.String getTaskId();
  /**
   * <pre>
   *&#47; The ID of the continuous incremental data export task. If empty, it is a
   * / normal data export task. If not empty, it is a continuous incremental
   * / data export task.
   * </pre>
   *
   * <code>optional string task_id = 12;</code>
   * @return The bytes for taskId.
   */
  com.google.protobuf.ByteString
      getTaskIdBytes();

  /**
   * <pre>
   *&#47; The tables are prohibited from exporting.
   * </pre>
   *
   * <code>repeated string black_list = 13;</code>
   * @return A list containing the blackList.
   */
  java.util.List<java.lang.String>
      getBlackListList();
  /**
   * <pre>
   *&#47; The tables are prohibited from exporting.
   * </pre>
   *
   * <code>repeated string black_list = 13;</code>
   * @return The count of blackList.
   */
  int getBlackListCount();
  /**
   * <pre>
   *&#47; The tables are prohibited from exporting.
   * </pre>
   *
   * <code>repeated string black_list = 13;</code>
   * @param index The index of the element to return.
   * @return The blackList at the given index.
   */
  java.lang.String getBlackList(int index);
  /**
   * <pre>
   *&#47; The tables are prohibited from exporting.
   * </pre>
   *
   * <code>repeated string black_list = 13;</code>
   * @param index The index of the value to return.
   * @return The bytes of the blackList at the given index.
   */
  com.google.protobuf.ByteString
      getBlackListBytes(int index);
}
